// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TelemetryClient is the client API for Telemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryClient interface {
	Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	MpoolSize(ctx context.Context, in *MpoolSizeRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	Syncing(ctx context.Context, in *SyncingRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	NetworkStoragePower(ctx context.Context, in *NSPRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
}

type telemetryClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryClient(cc grpc.ClientConnInterface) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.Telemetry/Peers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryClient) MpoolSize(ctx context.Context, in *MpoolSizeRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.Telemetry/MpoolSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryClient) Syncing(ctx context.Context, in *SyncingRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.Telemetry/Syncing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryClient) NetworkStoragePower(ctx context.Context, in *NSPRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/proto.Telemetry/NetworkStoragePower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServer is the server API for Telemetry service.
// All implementations must embed UnimplementedTelemetryServer
// for forward compatibility
type TelemetryServer interface {
	Peers(context.Context, *PeersRequest) (*DefaultResponse, error)
	MpoolSize(context.Context, *MpoolSizeRequest) (*DefaultResponse, error)
	Syncing(context.Context, *SyncingRequest) (*DefaultResponse, error)
	NetworkStoragePower(context.Context, *NSPRequest) (*DefaultResponse, error)
	mustEmbedUnimplementedTelemetryServer()
}

// UnimplementedTelemetryServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServer struct {
}

func (UnimplementedTelemetryServer) Peers(context.Context, *PeersRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peers not implemented")
}
func (UnimplementedTelemetryServer) MpoolSize(context.Context, *MpoolSizeRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MpoolSize not implemented")
}
func (UnimplementedTelemetryServer) Syncing(context.Context, *SyncingRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Syncing not implemented")
}
func (UnimplementedTelemetryServer) NetworkStoragePower(context.Context, *NSPRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkStoragePower not implemented")
}
func (UnimplementedTelemetryServer) mustEmbedUnimplementedTelemetryServer() {}

// UnsafeTelemetryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServer will
// result in compilation errors.
type UnsafeTelemetryServer interface {
	mustEmbedUnimplementedTelemetryServer()
}

func RegisterTelemetryServer(s grpc.ServiceRegistrar, srv TelemetryServer) {
	s.RegisterService(&_Telemetry_serviceDesc, srv)
}

func _Telemetry_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Telemetry/Peers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).Peers(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telemetry_MpoolSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MpoolSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).MpoolSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Telemetry/MpoolSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).MpoolSize(ctx, req.(*MpoolSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telemetry_Syncing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).Syncing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Telemetry/Syncing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).Syncing(ctx, req.(*SyncingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telemetry_NetworkStoragePower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NSPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).NetworkStoragePower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Telemetry/NetworkStoragePower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).NetworkStoragePower(ctx, req.(*NSPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Telemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Peers",
			Handler:    _Telemetry_Peers_Handler,
		},
		{
			MethodName: "MpoolSize",
			Handler:    _Telemetry_MpoolSize_Handler,
		},
		{
			MethodName: "Syncing",
			Handler:    _Telemetry_Syncing_Handler,
		},
		{
			MethodName: "NetworkStoragePower",
			Handler:    _Telemetry_NetworkStoragePower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telemetry.proto",
}
